{"version":3,"sources":["names.ts","random.ts","pseudonymization.ts"],"names":[],"mappings":";;;;AAAa,QAAA,QAAA,GAAW,CACtB,OADsB,EAEtB,OAFsB,EAGtB,MAHsB,EAItB,OAJsB,EAKtB,QALsB,CAAX;AAQA,QAAA,UAAA,GAAa,CACxB,MADwB,EAExB,MAFwB,EAGxB,MAHwB,EAIxB,OAJwB,EAKxB,OALwB,CAAb;AAQA,ACfb,QDea,CCfb,UDea,ECfb,CDe2B,ACfE,CDgB3B,EChBF,EAAwC,EDeb,EAEzB,OAFyB,EAGzB,MAHyB,EAIzB,OAJyB,EAKzB,MALyB,CAAd;AAQA,ACtBX,QDsBW,GCtBJ,IDsBI,CCtBC,EDsBS,CACrB,ECvBO,CAAW,KDsBG,ACtBE,EDwBvB,ICxBkB,KAAgB,CDsBb,EAGrB,ECzBuC,KAAL,CAAW,GDsBxB,ACtBa,CDsBvB,ACtBJ,CAAP;AD4BW,AE9Bb,ADGC,ICHD,IF8Ba,IE9Bb,MF8Ba,EE9Bb,CF8B0B,CACxB,OE/BF,CAAA,IF8B0B,EAExB,YAFwB,EAGxB,SAHwB,EAIxB,WAJwB,EAKxB,aALwB,CAAb;AAQA,AErCb,ADAA,ICAA,IFqCa,ACrCb,KCAA,CFqCa,GAAS,CACpB,ECtCF,CCAA,EDAA,QCAA,CFqCsB,AErCtB,EFuCE,CCvCF,cDqCsB,EAGpB,kBAHoB,CAAT;AAMA,AEzCA,ADEb,QDuCa,AEzCA,CDEb,QDuCa,GAAY,CACvB,CCxCF,CCFa,EDEb,CCF4D,EFyCnC,AEzCZ,EF2CX,aAFuB,EAGvB,aAHuB,EAIvB,MAJuB,CAAZ;AAOA,AE/CA,ADEX,QD6CW,AE/CA,GDEJ,KAAK,GCFD,GAAsC,ADE1C,ED6CI,AE/CA,GF+CmB,AC7CP,CD8CvB,EC9CA,QD6C8B,CAAnB;AAIA,AEjDb,ADCC,QDgDY,CEjDb,YAAA,CAA6B,CFiDhB,AEjDb,EAAwC,CFiDT,CAC7B,IElDF,EAAwD,CFiDzB,EAE7B,SAF6B,EAG7B,SAH6B,EAI7B,QAJ6B,CAAlB;AAOA,AEvDX,ADFF,QDyDa,AEvDL,ADFR,MCEc,CFuDD,GAAU,CACrB,EC1DF,CCEc,EDFd,EDyDuB,EAErB,OEzDY,CAAc,CFuDL,ACzDvB,ED4DE,IE1DiC,CAAP,CAAd,CAAZ,EF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","file":"pseudonymization.map","sourcesContent":["export const maleName = [\n  \"David\",\n  \"Peter\",\n  \"Erik\",\n  \"Johan\",\n  \"Anders\"\n]\n\nexport const femaleName = [\n  \"Emma\",\n  \"Anna\",\n  \"Sara\",\n  \"Maria\",\n  \"Karin\"\n]\n\nexport const unknownName = [\n  \"Emma\",\n  \"Peter\",\n  \"Sara\",\n  \"Johan\",\n  \"Anna\"\n]\n\nexport const surname = [\n  \"Olsson\",\n  \"Svensson\",\n  \"Johansson\"\n]\n\nexport const streetName = [\n  \"Skogsvägen\",\n  \"Björkvägen\",\n  \"Nygatan\",\n  \"Parkvägen\",\n  \"Strandvägen\"\n]\n\nexport const school = [\n  \"Skälbyskolan\",\n  \"Broholmskolan\",\n  \"Minervagymnasium\"\n]\n\nexport const workplace = [\n  \"Volvo\",\n  \"hemtjänsten\",\n  \"Sahlgrenska\",\n  \"IKEA\"\n]\n\nexport const otherInstitution = [\n  \"Sportlag\"\n]\n\nexport const countryOfOrigin = [\n  \"Norge\",\n  \"Danmark\",\n  \"Finland\",\n  \"Island\"\n]\n\nexport const country = [\n  \"Norge\",\n  \"Danmark\",\n  \"Finland\",\n  \"Island\"\n]\n\nexport const city = [\n  \"Ladvreta\",\n  \"Guntorp\",\n  \"Myre\"\n]\n\nexport const geographicLocation = [\n  \"Storberget\",\n  \"Björkudden\",\n  \"Långsjön\"\n]\n\nexport const region = [\n  \"Region\"\n]\n\nexport const area = [\n  \"Area\"\n]\n\nexport const transport = [\n  \"buss\",\n  \"tunnelbana\", \n  \"spårvagn\", \n  \"tåg\"\n]\n","\nexport function getRandomInt(max: number): number {\n  return Math.floor(Math.random() * Math.floor(max))\n}\n\nexport function getRandomBool(): boolean {\n  return Math.random() > 0.5\n}\n\nexport function getRandomBetween(from: number, to: number): number {\n  return from + getRandomInt(from - to)\n}","import * as names from './names'\nimport * as random from './random'\n\nexport const variableMapping: { [key: string]: number[] } = {}\nexport const usedForType: { [key: string]: any } = {}\n\nexport function pseudonymize(s: string, labels: string[]): string {\n  const fun = anonymization[labels[0]]\n  if (fun) {\n    return fun(labels[0], labels.slice(1), s)\n  } else {\n    return s\n  }\n}\n\nfunction pseudonymizeAge(type: string, labels: string[], s: string): string {\n  const ageInt = parseInt(s)\n  if (isNaN(ageInt)) {\n    return '' + random.getRandomInt(70)\n  } else {\n    const offset = random.getRandomInt(5) - 2\n    return '' + (ageInt + offset)\n  }\n}\n\nfunction pseudonymizeWithVariable(a: string[]) {\n  return function (type: string, labels: string[], s: string): string {\n    if(!usedForType[type]) {\n      usedForType[type] = []\n    }\n    \n    if (labels.length > 0) {\n      const variableIdx = parseInt(labels[labels.length - 1])\n      if (!isNaN(variableIdx)) {\n        if (!variableMapping[type]) {\n          variableMapping[type] = []\n        }\n        if (variableMapping[type][variableIdx] != undefined) {\n          return a[variableMapping[type][variableIdx]]\n        } else {\n          const arrayIdx = getRandomArrayIdx(a, variableMapping[type])\n          variableMapping[type][variableIdx] = arrayIdx\n          if (usedForType[type].indexOf(arrayIdx) == -1) {\n            usedForType[type].push(arrayIdx)\n          }\n          return a[arrayIdx]\n        }\n      }\n    }\n    const arrayIdx = getRandomArrayIdx(a, usedForType[type])\n    if (usedForType[type].indexOf(arrayIdx) == -1) {\n      usedForType[type].push(arrayIdx)\n    }\n    return a[arrayIdx]\n  }\n}\n\nfunction randomInt(): string {\n  return '' + (random.getRandomInt(50) + 1)\n}\n\nfunction zipCode(type: string, labels: string[], s: string): string {\n  let letters = 'ABCDEFGHIJKLMNOPQRZTUVZXY'\n  s = replaceNumbersWithZero(s)\n  const letterExp = new RegExp(\"[0-9]\", \"g\")\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    if (isLetter(s[i])) {\n      newString += letters[0]\n      letters = letters.slice(1)\n    } else {\n      newString += s[i]\n    }\n  }\n  return  newString\n}\n\nfunction isLetter(char: string): boolean {\n  return char.toUpperCase() != char.toLowerCase()\n}\n\nfunction phoneNumber(type: string, labels: string[], s: string): string {\n  return replaceNumbersWithZero(s)\n}\n\nfunction replaceNumbersWithZero(s: string): string {\n  return s.replace(new RegExp(\"[0-9]\", \"g\"), \"0\")\n}\n\nfunction email(): string {\n  return 'email@dot.com'\n}\n\nfunction institution(type: string, labels: string[], s: string): string {\n  const instType = labels[0]\n  if (instType === 'school') {\n    return pseudonymizeWithVariable(names.school)(type, labels, s)\n  } else if (instType === 'work') {\n    return pseudonymizeWithVariable(names.workplace)(type, labels, s)\n  } else {\n    return pseudonymizeWithVariable(names.otherInstitution)(type, labels, s)\n  }\n}\n\n\nfunction getRandomArrayIdx(a: any[], used: number[] = []): number {\n  if( used.length == a.length) {\n    // every element in a has already been used, take a random one\n    random.getRandomInt(a.length)\n  }\n\n  let idx = 0\n  let loops = 0\n  do {\n    idx = random.getRandomInt(a.length)\n    loops += 1\n  // TODO this might loop forever, it will (very) probably not happen, fix better solution anyway?\n  } while (used.indexOf(idx) != -1)\n\n  return idx\n}\n\nfunction isUpperCase (str: string): boolean {\n  return /^[A-Z]*$/.test(str)\n}\n\nfunction pseudonymizeWrittenMonth(type: string, labels: string[], s: string): string {\n  const idx = random.getRandomInt(12)\n  const months = [\"januari\", \"februari\", \"mars\", \"april\", \"maj\", \"juni\", \"juli\", \"augusti\", \"september\", \"oktober\", \"november\", \"december\"]\n  let result = months[idx]\n  if (isUpperCase(s[0])) {\n    result = s[0].toUpperCase() + result.slice(1)\n  }\n  return result\n}\n\nfunction pseudonymizeYear(type: string, labels: string[], s: string): string {\n  const yearInt = parseInt(s)\n  if (isNaN(yearInt)) {\n    return '' + random.getRandomBetween(1970, 2018)\n  } else {\n    const offset = random.getRandomInt(5) - 2\n    return '' + (yearInt + offset)\n  }\n}\n\nfunction pseudonymizeDate(type: string, labels: string[], s: string): string {\n  return s.replace(new RegExp(\"[0-9]\", \"g\"), \"1\")\n}\n\nfunction pseudonymizeTransport(type: string, labels: string[], s: string): string {\n  let result = pseudonymizeWithVariable(names.transport)(type, labels, s)\n  if (isUpperCase(s[0])) {\n    result = s[0].toUpperCase() + result.slice(1)\n  }\n  return result\n}\n\nexport const anonymization:{ [key: string]: (type: string, labels: string[], s: string) => string } = {\n  'firstname:male': pseudonymizeWithVariable(names.maleName),\n  'firstname:female': pseudonymizeWithVariable(names.femaleName),\n  'firstname:unknown': pseudonymizeWithVariable(names.unknownName),\n  'surname': pseudonymizeWithVariable(names.surname),\n  'middlename': () => 'A',\n  'initials': () => 'A',\n  'institution': institution,\n  'school': pseudonymizeWithVariable(names.school),\n  'work': pseudonymizeWithVariable(names.workplace),\n  'other_institution': pseudonymizeWithVariable(names.otherInstitution),\n  'country_of_origin': pseudonymizeWithVariable(names.country),\n  'country': pseudonymizeWithVariable(names.countryOfOrigin),\n  'zip_code': zipCode,\n  'region': pseudonymizeWithVariable(names.region),\n  'city': pseudonymizeWithVariable(names.city),\n  'area': pseudonymizeWithVariable(names.area),\n  'street': pseudonymizeWithVariable(names.streetName),\n  'geo': pseudonymizeWithVariable(names.geographicLocation),\n  'street_nr': randomInt,\n  'transport': pseudonymizeTransport,\n  'transport_line': () => '1',\n  'age': pseudonymizeAge,\n  'day': () => '' + (random.getRandomInt(28) + 1),\n  'month-digit': () => '' + (random.getRandomInt(12) + 1),\n  'month-word': pseudonymizeWrittenMonth,\n  'year': pseudonymizeYear,\n  'date-digits': pseudonymizeDate,\n  'phone_nr': phoneNumber,\n  'email': email,\n  'personid_nr': () => '123456-0000',\n  'account_nr': (type: string, labels: any, str: string) => replaceNumbersWithZero(str),\n  'license_nr': zipCode,\n  'url': () => 'url.com',\n  'other_nr_seq': (type: string, labels: any, str: string) => replaceNumbersWithZero(str)\n}\n"]}